
############################################################ fig1 and its table
#a. dingha
#b. esechie 93; 32.1 dS/m
#c. zakhartsev15
#d. gutierrez16
#e. kashefi03
#f. buck and barnes
#1.38e-23 boltzmann jk-1, 6.62e-34 planck js-1, 25+273.15=298.15 k
library(minpack.lm);z.v2=function(params, x){-params[1]*log(x)-params[2]*x+params[3]}; 

df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);

df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

#67, 60, 107, 83, 49, 64                                                

cbind.fill <- function(...){
    nm <- list(...) 
    nm <- lapply(nm, as.matrix)
    n <- max(sapply(nm, nrow)) 
    do.call(cbind, lapply(nm, function (x) 
        rbind(x, matrix(, n-nrow(x), ncol(x))))) 
}

#p=read.delim("data1",h=T);q=read.delim("data2",h=T)

p=cbind.fill(p[,67],p[,60],p[,107],p[,83],p[,49],p[,64],fill=NA)
q=cbind.fill(q[,67],q[,60],q[,107],q[,83],q[,49],q[,64],fill=NA)

#colnames(p)[52]
x=1/(p+273.15);y=log(q);y[y==-Inf]=NA;y[y==Inf]=NA


#pdf('figure-1.pdf')
par(mfrow=c(4,4));par(mar=c(2,2,2,2))
for (i in 1:6){tryCatch({
    x2=x[,i];y2=y[,i];
loglin<- nlsLM(y2~-a*log(x2)-b*x2+c,start=list(a=1,b=1,c=1));xc=seq(min(x2,na.rm=TRUE),max(x2,na.rm=TRUE),0.0000001)
    plot(x2,y2,ylim=c(min(y[,i],na.rm=T),max(y[,i],na.rm=T)),xlim=c(min(x[,i],na.rm=T),max(x[,i],na.rm=T)))
    par(new=TRUE)
    plot(xc,z.v2(coef(loglin),xc),type="l",lwd="1",xlab="",ylab="",ylim=c(min(y[,i],na.rm=T),max(y[,i],na.rm=T)),xlim=c(min(x[,i],na.rm=T),max(x[,i],
    na.rm=T)),axes=F,ann=F)
    }, error= function(e) {cat("Error", "\n")},
    warning= function(w) {cat("Warning", "\n")})
}
#dev.off()
#################### parameters of the six examples


out=NULL
for (i in 1:ncol(q)){
tryCatch(
{
x=1/(p[,i]+273.15);y=8.31*log(q[,i])
loglin<- nlsLM(y~-a*log(x)-b*x+c,start=list(a=1,b=1,c=1))
x2=log(x); summary(lm(y~x+x2))
r2=summary(lm(y~x+x2))$r.squared
summary(lm(y~x+x2))$coefficients[2,4]#p value of x
pvalue.mlr=summary(lm(y~x+x2))$coefficients[3,4]#p value of x2
a=summary(loglin)$coefficients[1,1]
b=summary(loglin)$coefficients[2,1]
c=summary(loglin)$coefficients[3,1]
pvals=data.frame(
summary(loglin)$coefficients[1,1],                          #a
summary(loglin)$coefficients[1,4],                          #p-value_a
summary(loglin)$coefficients[2,1],                          #b
summary(loglin)$coefficients[2,4],                          #p-value_b
c,                                                          #c                    
summary(loglin)$coefficients[3,4],                          #p-value_c
r2                                                          #r2
)
    out=rbind(out,pvals) #2,3 y cor(z(coef(loglin),x),y,use = "na.or.complete"); aqui se selecciona el parametro que queremos anotar
            },
            error = function(e){
            message("* Caught an error on itertion ", i)
            print(e)
        }
   )

}

colnames(out)=c("a","pvalue_a","b","pvalue_b","c","pvalue_c","r2")
out
write.table(out,file="table_params.fig1.txt")



#######################################################################################################################################################################
#######################################################################################################################################################################
#fig. 2 data collapse, GW derivation

################################################# data collapse code

#################################################
library(minpack.lm);library(kimsic)
z = function(params, x) {-params[1]*log(x)-params[2]*x+params[3]}
z.v2=function(params, x){-params[1]*log(x)-params[2]*x+params[3]}; #x=1/(x+273.15);y=8.31*log((y*6.62e-34)/((x+273.15)*1.38e-23))

# to estimate the PARAMETERS of the loglin fitted curves

df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);

#here I have to i) sort by "generic variable", ii) extract the subdataframe of "enzyme reaction rate" and define again the p and q dataframes 
#then use different equations to fit the parameters for enzymes and above molecular level 
#newdata <- mtcars[order(mpg),]



df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]



#gas constant: kJ/(mol*K)= 8.31445e-3=0.00831445
#1.38e-23 boltzmann jk-1
#6.62e-34 planck js-1
#8.3144621e-5= m3 bar K−1 mol−1
#8.205746e−5 m3 atm K−1 mol−1 

out=NULL
for (i in 1:ncol(p)){
tryCatch({

x=1/(p[,i]+273.15);y=log(q[,i]/(p[,i]+273.15));y[y==-Inf]=NA;y[y==Inf]=NA
#x=1/(p[,i]+273.15);y=log(q[,i]/(p[,i]+273.15))

loglin<- nlsLM(y~-a*log(x)-b*x+c,start=list(a=1,b=1,c=1))

#multiple linear regression to fit the model
x2=log(x)
#summary(lm(y~x+x2))
r2=summary(lm(y~x+x2))$r.squared
summary(lm(y~x+x2))$coefficients[2,4]#p value of x
pvalue.mlr=summary(lm(y~x+x2))$coefficients[3,4]#p value of x2
a=summary(loglin)$coefficients[1,1]
b=summary(loglin)$coefficients[2,1]
c=summary(loglin)$coefficients[3,1]
#delta_S_0=c+(a*log(298.15))-log(1.38e-23/6.62e-34)
pvals=data.frame(summary(loglin)$coefficients[1,1],             #a
summary(loglin)$coefficients[1,4],                          #p-value_a
summary(loglin)$coefficients[2,1],                          #b
summary(loglin)$coefficients[2,4],                          #p-value_b
#delta_S_0,
c,                          				#entropy at a reference temperature
summary(loglin)$coefficients[3,4],                          #p-value_c
#cor(z(coef(loglin),x),y,use = "na.or.complete")            #cor_obse_y-pred_y
r2
)

out=rbind(out,pvals) #2,3 y cor(z(coef(loglin),x),y,use = "na.or.complete"); aqui se selecciona el parametro que queremos anotar
}, error = function(msg){
            return("Error")
        })          
   

}
output.enzyme=out




out=NULL
for (i in 1:ncol(p)){
tryCatch({

x=1/(p[,i]+273.15);y=log(q[,i]);y[y==-Inf]=NA;y[y==Inf]=NA
#x=1/(p[,i]+273.15);y=log(q[,i]/(p[,i]+273.15))

loglin<- nlsLM(y~-a*log(x)-b*x+c,start=list(a=1,b=1,c=1))

#multiple linear regression to fit the model
x2=log(x)
#summary(lm(y~x+x2))
r2=summary(lm(y~x+x2))$r.squared
summary(lm(y~x+x2))$coefficients[2,4]#p value of x
pvalue.mlr=summary(lm(y~x+x2))$coefficients[3,4]#p value of x2
a=summary(loglin)$coefficients[1,1]
b=summary(loglin)$coefficients[2,1]
c=summary(loglin)$coefficients[3,1]
#delta_S_0=c+(a*log(298.15))-log(1.38e-23/6.62e-34)
pvals=data.frame(summary(loglin)$coefficients[1,1],             #a
summary(loglin)$coefficients[1,4],                          #p-value_a
summary(loglin)$coefficients[2,1],                          #b
summary(loglin)$coefficients[2,4],                          #p-value_b
#delta_S_0,
c,                          				#entropy at a reference temperature
summary(loglin)$coefficients[3,4],                          #p-value_c
#cor(z(coef(loglin),x),y,use = "na.or.complete")            #cor_obse_y-pred_y
r2
)

out=rbind(out,pvals) #2,3 y cor(z(coef(loglin),x),y,use = "na.or.complete"); aqui se selecciona el parametro que queremos anotar
}, error = function(msg){
            return("Error")
        })          
   

}
output.macroscopic=out
#################################################   data collapse concave enzyme
#IMPORTANT: COLUMN INTERVLAS SHOULD BE DEFINED FOR out, p, AND q

out=as.data.frame(cbind(output.enzyme[,1],output.enzyme[,3],output.enzyme[,5]))

options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);
df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL

#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#


                     #figure legends
###################### col legend #6 taxonomic groups
#1-archaea
#2-bacteria
#3-un euk
#4-ecto; animals and plants
#5-endo
#(6-plant)
#7-virus

###################### variable legend pch #21 variables
#0-enzyme rat
#1-body size
#2-carbon stock
#3-dev rate
#4-eco flux
#19-fecundity
#5-funct response
#7-max germination
#8-met rate
#10-performance
#11-population density
#12-pop flux
#13-pop growth rate
#15-richness
#17-total abundance
#6-generation time
#16-latency period
#18-mortality rat
#9-muta
#14-energy use
#20 mass-specific metabolic rate













out=out[1:19,4:6] #for concave curves enzyme
#out=out[1:96,4:6] #for concave curves
#out=out[102:118,4:6] #for convex curves
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[1:19,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[1:19,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]
s_ys=NULL                
    for (i in 1:nrow(d)){
s_y=(-a[i]*log(opt[i])/a[i])+((-log(q[,i]/(p[,i]+273.15))+log.c[i])/a[i])-((b[i]*opt[i])/a[i])   #gbw's                          
#s_y=log(d[i,2]/-d[i,1])+((log(q[,i]/(p[,i]+273.15))-d[i,3])/-d[i,1])                          #jia's
    s_ys[i]=list(s_y)                
}
max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA

x=1/(p+273.15)
s_xs=NULL                
for (i in 1:nrow(d)){          
s_x=((d[i,2]/-d[i,1])*x[,i])
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)            

svg("figure2.svg")                                           #HERE STARTS THE FIGURE
par(mfrow=c(4,4));par(mar=c(2,2,2,2))
#for (i in 1:18){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}

#for (i in 19:19){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1)}

for (i in 1:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}
for (i in 3:5){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=2);par(new=T)}
for (i in 6:6){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=4);par(new=T)}
for (i in 7:11){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=5);par(new=T)}
for (i in 12:18){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=3);par(new=T)}
for (i in 19:19){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=7);par(new=T)}

#library(minpack.lm);library(kimisc)
z2.sad=function(params, x){params[1]*log(x)-params[2]*x}
z3.happy=function(params, x){-params[1]*log(x)+params[2]*(x-1)} #y=-1*log(x)+1*(x-1)
z3.sad=function(params, x){params[1]*log(x)-params[2]*(x-1)} #y=1*log(x)-1*(x-1)
xc=seq(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T),0.00001)
#plot(xc,z2.sad(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #jia
plot(xc,z3.sad(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #gw
min(s_xs.df,na.rm=T)
max(s_xs.df,na.rm=T)
####################################################################################### concave macroscopic
out=as.data.frame(cbind(output.macroscopic[,1],output.macroscopic[,3],output.macroscopic[,5]))

options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);
df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL

out=out[20:96,4:6]
#out=out[1:96,4:6] #for concave curves
#out=out[102:118,4:6] #for convex curves
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[20:96,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[20:96,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]


p=p[,1:]
s_ys=NULL                
    for (i in 1:nrow(d)){
s_y=(-a[i]*log(opt[i])/a[i])+((-log(q[,i])+log.c[i])/a[i])-((b[i]*opt[i])/a[i])   #gbw's                          
#s_y=log(d[i,2]/-d[i,1])+((log(q[,i])-d[i,3])/-d[i,1])                          #jia's

    s_ys[i]=list(s_y)                
}
max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA

x=1/(p+273.15)
s_xs=NULL                
for (i in 1:nrow(d)){          
s_x=((d[i,2]/-d[i,1])*x[,i])
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)            

#svg('fig2colllllapse.svg')
#par(mfrow=c(2,2));#par(mar=c(2,2,2,2)
#for (i in 1:76){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}

#for (i in 77:77){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1)}
for (i in 1:1){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=1,col=4);par(new=T)}
for (i in 2:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=2,col=4);par(new=T)}
for (i in 3:3){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=3,col=4);par(new=T)}
for (i in 4:8){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=1);par(new=T)}
for (i in 9:13){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=2);par(new=T)}
for (i in 14:15){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=4);par(new=T)}
for (i in 16:16){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=3);par(new=T)}
for (i in 17:17){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=19,col=4);par(new=T)}
for (i in 18:18){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=5,col=4);par(new=T)}
for (i in 19:26){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=7,col=4);par(new=T)}
for (i in 27:31){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=2);par(new=T)}
for (i in 32:34){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=4);par(new=T)}
for (i in 35:35){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=5);par(new=T)}
for (i in 36:40){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=3);par(new=T)}
for (i in 41:41){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=10,col=4);par(new=T)}
for (i in 42:42){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=11,col=4);par(new=T)}
for (i in 43:43){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=11,col=5);par(new=T)}
for (i in 44:47){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=12,col=1);par(new=T)}
for (i in 48:50){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=12,col=2);par(new=T)}
for (i in 51:51){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=1);par(new=T)}
for (i in 52:53){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=2);par(new=T)}
for (i in 54:55){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=4);par(new=T)}
for (i in 56:56){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=5);par(new=T)}
for (i in 57:58){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=3);par(new=T)}
for (i in 59:60){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=1);par(new=T)}
for (i in 61:64){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=2);par(new=T)}
for (i in 65:68){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=4);par(new=T)}
for (i in 69:71){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=5);par(new=T)}
for (i in 72:72){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=3);par(new=T)}
for (i in 73:73){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=7);par(new=T)}
for (i in 74:74){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=17,col=1);par(new=T)}
for (i in 75:76){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=17,col=2);par(new=T)}
for (i in 77:77){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=17,col=7);par(new=T)}

z2.sad=function(params, x){params[1]*log(x)-params[2]*x}
z3.happy=function(params, x){-params[1]*log(x)+params[2]*(x-1)} #y=-1*log(x)+1*(x-1)
z3.sad=function(params, x){params[1]*log(x)-params[2]*(x-1)} #y=1*log(x)-1*(x-1)

xc=seq(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T),0.00001)
#plot(xc,z2.sad(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #jia
plot(xc,z3.sad(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #gw



####################################################################################### data collapse convex enzyme

out=as.data.frame(cbind(output.enzyme[,1],output.enzyme[,3],output.enzyme[,5]))

options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);
df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL

#peak=out
#peak=peak[97:128,];rownames(peak)=NULL;peak
#colnames(peak)=c("curv","vari","taxa","a","b","s0")
#peak=peak[order(peak$taxa, decreasing=F),];rownames(peak)=NULL;peak


#out=out[97:128,4:6] #for convex curves
out=out[97:106,4:6] #for convex curves enzyme # 106:128 convex above-enzyme
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[97:106,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[97:106,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]

#s_ys=NULL
#    for (i in 1:ncol(p)){
#    #s_y=log(d[i,2]/-d[i,1])+((log(q[,i])+d[i,3])/-d[i,1])   #scaled rate; ln(p_0)=d[,3]
#    s_y=((1/-d[i,1])*d[i,3])-log(d[i,2]/-d[i,1])-((1/-d[i,1])*log(q[,i]))
#    s_ys[i]=list(s_y)                
#}

s_ys=NULL                
    for (i in 1:nrow(d)){
s_y=-(-a[i]*log(opt[i])/a[i])-((-log(q[,i]/(p[,i]+273.15))+log.c[i])/a[i])+((b[i]*opt[i])/a[i])   #gbw's                          
#s_y=((1/-d[i,1])*d[i,3])-log(d[i,2]/-d[i,1])-((1/-d[i,1])*log(q[,i]/(p[,i]+273.15)))               #JIA's CONVEX
    s_ys[i]=list(s_y)                
}
max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA


x=1/(p+273.15)
s_xs=NULL                
for (i in 1:nrow(d)){          
s_x=((d[i,2]/-d[i,1])*x[,i])
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)            

#svg('fig2colllllapse.svg')
#par(mfrow=c(4,4));par(mar=c(2,2,2,2))
#for (i in 1:9){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}
#for (i in 10:10){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1)}

for(i in 1:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}
for(i in 3:10){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=4);par(new=T)}
for(i in 11:11){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=5,col=4);par(new=T)}

z2=function(params, x){-params[1]*log(x)+params[2]*x}
z3.happy=function(params, x){-params[1]*log(x)+params[2]*(x-1)} #y=-1*log(x)+1*(x-1)
z3.sad=function(params, x){params[1]*log(x)-params[2]*(x-1)} #y=1*log(x)-1*(x-1)

xc=seq(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T),0.00001)
#plot(xc,z2.happy(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #jia
plot(xc,z3.happy(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #gw

min(s_xs.df,na.rm=T)
max(s_xs.df,na.rm=T)
##################################################################### data collapse convex macroscopic
out=as.data.frame(cbind(output.macroscopic[,1],output.macroscopic[,3],output.macroscopic[,5]))

options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);
df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL

#peak=out
#peak=peak[97:128,];rownames(peak)=NULL;peak
#colnames(peak)=c("curv","vari","taxa","a","b","s0")
#peak=peak[order(peak$taxa, decreasing=F),];rownames(peak)=NULL;peak


#out=out[97:128,4:6] #for convex curves
#out=out[97:106,4:6] #for convex curves enzyme # 106:128 convex above-enzyme
out=out[106:128,4:6]
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[106:128,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[106:128,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]

#s_ys=NULL
#    for (i in 1:ncol(p)){
#    #s_y=log(d[i,2]/-d[i,1])+((log(q[,i])+d[i,3])/-d[i,1])   #scaled rate; ln(p_0)=d[,3]
#    s_y=((1/-d[i,1])*d[i,3])-log(d[i,2]/-d[i,1])-((1/-d[i,1])*log(q[,i]))
#    s_ys[i]=list(s_y)                
#}

s_ys=NULL                
    for (i in 1:nrow(d)){
s_y=-(-a[i]*log(opt[i])/a[i])-((-log(q[,i])+log.c[i])/a[i])+((b[i]*opt[i])/a[i])   #gbw's                          
#s_y=log(d[i,2]/-d[i,1])+((log(q[,i])-d[i,3])/-d[i,1])                              #jia's concave
#s_y=((1/-d[i,1])*d[i,3])-log(d[i,2]/-d[i,1])-((1/-d[i,1])*log(q[,i]))               #JIA's CONVEX
    s_ys[i]=list(s_y)                
}
max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA


x=1/(p+273.15)
s_xs=NULL                
for (i in 1:nrow(d)){          
s_x=((d[i,2]/-d[i,1])*x[,i])
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)            

#svg('fig2colllllapse.svg')
#par(mfrow=c(4,4));par(mar=c(2,2,2,2))
#for (i in 1:22){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}

#for (i in 23:23){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1)}
for (i in 1:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=6,col=1);par(new=T)}
for (i in 2:3){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=6,col=2);par(new=T)}
for (i in 4:6){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=16,col=7);par(new=T)}
for (i in 7:7){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=20,col=4);par(new=T)}
for (i in 8:12){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=5);par(new=T)}
for (i in 13:14){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=18,col=4);par(new=T)}
for (i in 15:19){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=9,col=4);par(new=T)}
for (i in 20:21){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=14,col=5);par(new=T)}


z2.happy=function(params, x){-params[1]*log(x)+params[2]*x}
z3.happy=function(params, x){-params[1]*log(x)+params[2]*(x-1)} #y=-1*log(x)+1*(x-1)
z3.sad=function(params, x){params[1]*log(x)-params[2]*(x-1)} #y=1*log(x)-1*(x-1)

xc=seq(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T),0.00001)
#plot(xc,z2.happy(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #jia
plot(xc,z3.happy(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #gw





#end of fig. s6
#######################################################################################################################################################################







#####################################################################################################################################################################

################################################# here is the data fit for the parameters of the LINEAR data collapse
################################################# enzyme level

library(minpack.lm);z = function(params, x) {-params[1]*log(x)-params[2]*x+params[3]}
z.v2=function(params, x){-params[1]*log(x)-params[2]*x+params[3]}; #x=1/(x+273.15);y=8.31*log((y*6.62e-34)/((x+273.15)*1.38e-23))

# to estimate the PARAMETERS of the loglin fitted curves
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);

#here I have to i) sort by "generic variable", ii) extract the subdataframe of "enzyme reaction rate" and define again the p and q dataframes 
#then use different equations to fit the parameters for enzymes and above molecular level 
#newdata <- mtcars[order(mpg),]



df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:29,3:244];p=t(p);colnames(p)=df1$V2[1:29]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:29,3:244];q=t(q);colnames(q)=df2$V2[1:29]



#gas constant: kJ/(mol*K)= 8.31445e-3=0.00831445
#1.38e-23 boltzmann jk-1
#6.62e-34 planck js-1
#8.3144621e-5= m3 bar K−1 mol−1
#8.205746e−5 m3 atm K−1 mol−1 

out=NULL
for (i in 1:ncol(p)){
tryCatch({

x=1/(p[,i]+273.15);y=log(q[,i]/(p[,i]+273.15));y[y==-Inf]=NA;y[y==Inf]=NA
#x=1/(p[,i]+273.15);y=log(q[,i]/(p[,i]+273.15))

loglin<- nlsLM(y~-a*log(x)-b*x+c,start=list(a=1,b=1,c=1))

#multiple linear regression to fit the model
x2=log(x)
#summary(lm(y~x+x2))
r2=summary(lm(y~x+x2))$r.squared
summary(lm(y~x+x2))$coefficients[2,4]#p value of x
pvalue.mlr=summary(lm(y~x+x2))$coefficients[3,4]#p value of x2
a=summary(loglin)$coefficients[1,1]
b=summary(loglin)$coefficients[2,1]
c=summary(loglin)$coefficients[3,1]
#delta_S_0=c+(a*log(298.15))-log(1.38e-23/6.62e-34)
pvals=data.frame(summary(loglin)$coefficients[1,1],             #a
summary(loglin)$coefficients[1,4],                          #p-value_a
summary(loglin)$coefficients[2,1],                          #b
summary(loglin)$coefficients[2,4],                          #p-value_b
#delta_S_0,
c,                          				#entropy at a reference temperature
summary(loglin)$coefficients[3,4],                          #p-value_c
#cor(z(coef(loglin),x),y,use = "na.or.complete")            #cor_obse_y-pred_y
r2
)

out=rbind(out,pvals) #2,3 y cor(z(coef(loglin),x),y,use = "na.or.complete"); aqui se selecciona el parametro que queremos anotar
}, error = function(msg){
            return("Error")
        })          
   

}
out.enzymes=out


############################################# for above molecular levels


library(minpack.lm);z = function(params, x) {-params[1]*log(x)-params[2]*x+params[3]}
z.v2=function(params, x){-params[1]*log(x)-params[2]*x+params[3]}; #x=1/(x+273.15);y=8.31*log((y*6.62e-34)/((x+273.15)*1.38e-23))

# to estimate the PARAMETERS of the loglin fitted curves
p=read.delim("data1",h=F);                         #the "read.delim" function reads dat awith empty cells
q=read.delim("data2",h=F);

#here I have to i) sort by "generic variable", ii) extract the subdataframe of "enzyme reaction rate" and define again the p and q dataframes 
#then use different equations to fit the parameters for enzymes and above molecular level 
#newdata <- mtcars[order(mpg),]




df1 <- df1[order(df1$V1,df1$V2),];p=df1[30:128,3:244];p=t(p);colnames(p)=df1$V2[30:128];rownames(p)=NULL
df2 <- df2[order(df2$V1,df2$V2),];q=df2[30:128,3:244];q=t(q);colnames(q)=df2$V2[30:128];rownames(q)=NULL

out=NULL
for (i in 1:ncol(q)){
tryCatch(
{
x=1/(p[,i]+273.15);y=log(q[,i])

loglin<- nlsLM(y~-a*log(x)-b*x+c,start=list(a=1,b=1,c=1))
#multiple linear regression to fit the model
x2=log(x)
summary(lm(y~x+x2))
r2=summary(lm(y~x+x2))$r.squared
summary(lm(y~x+x2))$coefficients[2,4]#p value of x
pvalue.mlr=summary(lm(y~x+x2))$coefficients[3,4]#p value of x2
a=summary(loglin)$coefficients[1,1]
b=summary(loglin)$coefficients[2,1]
c=summary(loglin)$coefficients[3,1]
#delta_S_0=c+(a*log(298.15))-log(1.38e-23/6.62e-34)
pvals=data.frame(summary(loglin)$coefficients[1,1],             #a
summary(loglin)$coefficients[1,4],                          #p-value_a
summary(loglin)$coefficients[2,1],                          #b
summary(loglin)$coefficients[2,4],                          #p-value_b
#delta_S_0,
c,                          				    #entropy at a reference temperature
summary(loglin)$coefficients[3,4],                          #p-value_c
#cor(z(coef(loglin),x),y,use = "na.or.complete")            #cor_obse_y-pred_y
r2
)
    out=rbind(out,pvals) #2,3 y cor(z(coef(loglin),x),y,use = "na.or.complete"); aqui se selecciona el parametro que queremos anotar
            },
            error = function(e){
            message("* Caught an error on itertion ", i)
            print(e)
        }
   )

}
out.aboveenzymes=out

out=rbind(out.enzymes,out.aboveenzymes)



#################################################   data collapse concave enzyme ok

out=rbind(out.enzymes,out.aboveenzymes)
out=as.data.frame(cbind(out[,1],out[,3],out[,5]))


options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);
df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]



r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

h=cbind(df1$V2,df1$V1,r$auhor.and.year,r$concavity) 
write.table(h,file="matching.txt",row.names=F,col.names=F)

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL




peak=out
peak=peak[1:19,];rownames(peak)=NULL;peak
colnames(peak)=c("curv","vari","taxa","a","b","s0")
peak=peak[order(peak$taxa, decreasing=F),];rownames(peak)=NULL;peak


out=out[1:19,4:6] #for concave curves
#out=out[102:118,4:6] #for convex curves
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[1:19,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[1:19,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]
log.c=d[,3]


x=1/(p+273.15)
s_ys=NULL                
    for (i in 1:nrow(d)){
    #s_y=s_y=(log(q[,i]/(x[,i]))-d[i,3]+(d[i,2]*x[,i]))/-d[i,1] #scaled rate; ln(p_0)=d[,3]
#s_y=-(log(q[,i]/x[,i])/d[i,1])+
#((d[i,3]-(d[i,1]*log(opt[i]))-(d[i,2]*opt[i]))/d[i,1])+
#(x[,i]/opt[i])-1
s_y=1+(a[i]*log(opt[i])/a[i])-((b[i]*opt[i])/a[i])+log(x[,i]/opt[i])+(log(q[,i]*x[,i])/a[i])-(log.c[i]/a[i])   #gbw's   
s_ys[i]=list(s_y)                
}
max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df=as.data.frame(s_ys.df)    
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA


x=1/(p+273.15)
s_xs=NULL                
for (i in 1:nrow(d)){          
#s_x=log(x[,i])                                                             
s_x=x[,i]/opt[i]
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df=as.data.frame(s_xs.df)   
s_xs.df[s_xs.df==Inf]=NA 
s_xs.df[s_xs.df==-Inf]=NA          

#svg('ext-dat-fig-10---.svg')
#par(mfrow=c(4,4));par(mar=c(2,2,2,2))
for (i in 1:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}
for (i in 3:5){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=2);par(new=T)}
for (i in 6:6){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=4);par(new=T)}
for (i in 7:11){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=5);par(new=T)}
for (i in 12:18){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=3);par(new=T)}
for (i in 19:19){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=7);par(new=T)}

ys=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T))
xs=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T))
plot(ys~xs,
ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),col="white")
abline(lm(ys~xs))




#################################################   data collapse concave-above molecular ok # but must be checked; --at least--6 and 7 do not collapse

#the out of the analysis have the pvalues and rsqs

out=rbind(out.enzymes,out.aboveenzymes)
out=as.data.frame(cbind(out[,1],out[,3],out[,5]))


options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);

df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]


r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL


peak=out
peak=peak[20:96,];rownames(peak)=NULL;peak
colnames(peak)=c("curv","vari","taxa","a","b","s0")
peak=peak[order(peak$taxa, decreasing=F),];rownames(peak)=NULL;peak




out=out[20:96,4:6] #for concave curves
#out=out[102:118,4:6] #for convex curves
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[20:96,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[20:96,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]
log.c=d[,3]

x=1/(p+273.15)
s_ys=NULL                
    for (i in 1:nrow(d)){
    #s_y=(log(q[,i])-d[i,3]+(d[i,2]*x[,i]))/-d[i,1] #scaled rate; ln(p_0)=d[,3]
#s_y=-(log(q[,i])/d[i,1]) + ((d[i,3]-(d[i,1]*log(opt[i]))-(d[i,2]*opt[i]))/d[i,1]) + (x[,i]/opt[i])-1
s_y=1+(a[i]*log(opt[i])/a[i])-((b[i]*opt[i])/a[i])+log(x[,i]/opt[i])+(log(q[,i])/a[i])-(log.c[i]/a[i])   #gbw's
    s_ys[i]=list(s_y)                
}
max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA
s_ys.df<-as.data.frame(s_ys.df)

x=1/(p+273.15)
s_xs=NULL                
for (i in 1:nrow(d)){          
#s_x=log(x[,i])
s_x=x[,i]/opt[i]                                                         
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)            

#s_ys.df[,6:7]=NULL
#s_xs.df[,6:7]=NULL

#concave above
#svg('fig2_cright.svg'); par(mfrow=c(4,4));par(mar=c(2,2,2,2))
for (i in 1:1){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=1,col=4);par(new=T)}
for (i in 2:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=2,col=4);par(new=T)}
for (i in 3:3){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=3,col=4);par(new=T)}
for (i in 4:8){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=1);par(new=T)}
for (i in 9:13){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=2);par(new=T)}
for (i in 14:15){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=4);par(new=T)}
for (i in 16:16){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=3);par(new=T)}
for (i in 17:17){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=19,col=4);par(new=T)}
for (i in 18:18){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=5,col=4);par(new=T)}
for (i in 19:26){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=7,col=4);par(new=T)}
for (i in 27:31){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=2);par(new=T)}
for (i in 32:34){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=4);par(new=T)}
for (i in 35:35){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=5);par(new=T)}
for (i in 36:40){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=3);par(new=T)}
for (i in 41:41){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=10,col=4);par(new=T)}
for (i in 42:42){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=11,col=4);par(new=T)}
for (i in 43:43){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=11,col=5);par(new=T)}
for (i in 44:47){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=12,col=1);par(new=T)}
for (i in 48:50){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=12,col=2);par(new=T)}
for (i in 51:51){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=1);par(new=T)}
for (i in 52:53){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=2);par(new=T)}
for (i in 54:55){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=4);par(new=T)}
for (i in 56:56){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=5);par(new=T)}
for (i in 57:58){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=3);par(new=T)}
for (i in 59:60){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=1);par(new=T)}
for (i in 61:64){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=2);par(new=T)}
for (i in 65:68){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=4);par(new=T)}
for (i in 69:71){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=5);par(new=T)}
for (i in 72:72){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=3);par(new=T)}
for (i in 73:73){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=7);par(new=T)}
for (i in 74:74){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=17,col=1);par(new=T)}
for (i in 75:76){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=17,col=2);par(new=T)}
for (i in 77:77){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=17,col=7);par(new=T)}

ys=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T))
xs=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T))
plot(ys~xs,
ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),col="white")
abline(lm(ys~xs))
#dev.off()






############################################ data collapse convex enzyme level ok
#s_y=(-log(q[,i])+d[i,3]-(d[i,2]*x[,i]))/-d[i,1] #scaled rate; ln(p_0)=d[,3]
#s_x=log(x[,i]) 
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T))
out=rbind(out.enzymes,out.aboveenzymes)
out=as.data.frame(cbind(out[,1],out[,3],out[,5]))


options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);

df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]


#h=cbind(df1$V2,df1$V1,r$auhor.and.year,r$concavity) 
#write.table(h,file="matching.txt",row.names=F,col.names=F)

#out=cbind(r$auhor.and.year,r$concavity,r$Generic.variable,r$taxonomic_domain,out)
#out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain,r$auhor.and.year, decreasing=F),] #r$concavity,
#rownames(out)=c(1:nrow(out))
out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),] #r$concavity,
rownames(out)=c(1:nrow(out))

out=out[97:106,4:6] #for convex curves
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[97:106,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[97:106,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]
log.c=d[,3]

x=1/(p+273.15)
s_ys=NULL
    for (i in 1:ncol(p)){
s_y=-1-(a[i]*log(opt[i])/a[i])+((b[i]*opt[i])/a[i])-log(x[,i]/opt[i])-(log(q[,i]*x[,i])/a[i])+(log.c[i]/a[i])   #gbw's
    #s_y=+(log(q[,i])/d[i,1]) - ((d[i,3]-(d[i,1]*log(opt[i]))-(d[i,2]*opt[i]))/d[i,1]) - (x[,i]/opt[i])+1
     s_ys[i]=list(s_y)                
}

max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA


x=1/(p+273.15);s_xs=NULL                
for (i in 1:ncol(p)){          
s_x=x[,i]/opt[i]
#s_x=log(x[,i]/opt[i])                                                                                                                                                                       #scaled inverse temperature
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)   

#hey=out[97:128,]
#hey=hey[order(hey$"r$Generic.variable"),]
#hey=hey[order(hey$"r$taxonomic_domain"),]
#rownames(hey)=NULL
#1:3 archaea, 4:5 bacteria, 6:22 ecto, 26:29 endo, 30:32 virus
#for (i in 1:10){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}

for(i in 1:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}
for(i in 3:10){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=4);par(new=T)}
for(i in 11:11){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=5,col=4);par(new=T)}

ys=c(max(s_ys.df,na.rm=T),min(s_ys.df,na.rm=T))
xs=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T))
plot(ys~xs,
ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),col="white")
abline(lm(ys~xs))



############################################ data collapse convex above-mol OK
#things to change
#opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]
#log.c=d[,3]
#s_y=-1-(a[i]*log(opt[i])/a[i])+((b[i]*opt[i])/a[i])-log(x[,i]/opt[i])-(log(q[,i])/a[i])+(log.c[i]/a[i])   #gbw's
#s_x=x[,i]/opt[i] 
#ys=c(max(s_ys.df,na.rm=T),min(s_ys.df,na.rm=T)) 
#xs=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)) #remove the negative sign


out=rbind(out.enzymes,out.aboveenzymes)
out=as.data.frame(cbind(out[,1],out[,3],out[,5]))


options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);

df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),] #r$concavity,
rownames(out)=c(1:nrow(out))

peak=out
peak=peak[107:128,];rownames(peak)=NULL;peak
colnames(peak)=c("curv","vari","taxa","a","b","s0")
peak=peak[order(peak$taxa, decreasing=F),];rownames(peak)=NULL;peak

#out=out[1:101,4:6] #for concave curves
out=out[107:128,4:6] #for convex curves
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[107:128,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[107:128,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]
log.c=d[,3]

x=1/(p+273.15)
s_ys=NULL
    for (i in 1:ncol(p)){
s_y=-1-(a[i]*log(opt[i])/a[i])+((b[i]*opt[i])/a[i])-log(x[,i]/opt[i])-(log(q[,i])/a[i])+(log.c[i]/a[i])   #gbw's
    #s_y=+(log(q[,i])/d[i,1]) - ((d[i,3]-(d[i,1]*log(opt[i]))-(d[i,2]*opt[i]))/d[i,1]) - (x[,i]/opt[i])+1
     s_ys[i]=list(s_y)                
}

max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA


x=1/(p+273.15);s_xs=NULL                
for (i in 1:ncol(p)){          
s_x=x[,i]/opt[i] 
#s_x=log(x[,i]/opt[i])                                                                                                                                                                       #scaled inverse temperature
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)  
    
#vir black, bac gray, arc blue, un euk red, ecto green, endo brown
#blood flow (met rat) 18, energy consump '-', gen tim 17, mortali 18, mutat 'O', time 10

#u-shaped data
#svg('fig2b.svg');par(mfrow=c(4,4));par(mar=c(2,2,2,2))

for (i in 1:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=6,col=1);par(new=T)}
for (i in 2:3){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=6,col=2);par(new=T)}
for (i in 4:6){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=16,col=7);par(new=T)}
for (i in 7:7){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=20,col=4);par(new=T)}
for (i in 8:12){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=5);par(new=T)}
for (i in 13:14){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=18,col=4);par(new=T)}
for (i in 15:19){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=9,col=4);par(new=T)}
for (i in 20:21){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=14,col=5);par(new=T)}

ys=c(max(s_ys.df,na.rm=T),min(s_ys.df,na.rm=T))
xs=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T))
plot(ys~xs,
ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),col="white")
abline(lm(ys~xs))




#dev.off()



#####################################################################################################################################################################

#####################################################################################################################################################################

#####################################################################################################################################################################


######################################################### 2 An example of fit to the linear form of finite differences  
(see excel database sheet1)

x=c(
-0.00823,	
-0.00814,	
-0.00806,	
-0.00801,	
-0.00796,	
-0.00789,	
-0.00781,	
-0.00774,	
-0.00766,	
-0.00757,	
-0.00747,	
-0.00739,	
-0.00724,	
-0.00707,	
-0.00696,	
-0.00686,	
-0.00676,	
-0.00662
)	
y=c(
45.20411,
50.81123,
22.84617,
44.13508,
24.21967,
29.16710,
18.70039,
29.67120,
26.91982,
18.59759,
14.49208,
22.86977,
10.20380,
7.10376,
0.73565,
-2.27289,
-8.96686,
-14.87528
)

#svg("figS2.svg")
plot(y~x)
abline(lm(y~x))
summary(lm(y~x))
dev.off()

summary(lm(y~x))


################################################################ FIG s3 Distribution of the estimated thermodynamic parameter

out=read.table("output-parameters.txt",h=T)
r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

ref_par=data.frame(r$auhor.and.year,out$summary.loglin..coefficients.1..1., out$summary.loglin..coefficients.2..1., out$delta_S_0)
write.table(ref_par, file="authors_parameters.txt",row.names=F)
out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),] #r$concavity,
rownames(out)=c(1:nrow(out))

conc=out[1:96,]
conv=out[97:128,]

#svg("extendeddatafigure-3.svg")
par(mfrow=c(3,3))
hist(conc[,4],xlab="heat capacity",main="")
hist(conc[,6],xlab="enthalpy",main="")
hist(conc[,8],xlab="entropy at a reference temperature",main="")

hist(conv[,4],xlab="heat capacity",main="")
hist(conv[,6],xlab="enthalpy",main="")
hist(conv[,8],xlab="entropy at a reference temperature",main="")
#dev.off()




######################################################### 4 Distributions of the temperature response curve traits

d1=read.table("p25.txt",h=T)
d2=read.table("q25.txt",h=T)

out=NULL
for(i in 1:ncol(d1)){
 d=cbind(d1[,i],d2[,i])
 d=na.omit(d)    
 d=as.data.frame(d)
 colnames(d)=c("p","q")           
 d=d[order(d$p),]
 min=d[1,1]
 max=d[nrow(d),1]
 qmax=max(d[,2])
 z=which(d[,2]==qmax)
 opt<-d$p[z]

 tra=c(min,max,max-min,opt)

 out=rbind(out,tra)
}
t<-out
t=as.data.frame(t)
colnames(t)=c("min","max","ran","opt")
rownames(t)=colnames(d1)

#svg("extendeddatafigure-5.svg")
par(mfrow=c(3,3))
hist(t$min)
hist(t$max)
hist(t$ran)
hist(t$opt)
#dev.off()



######################################################### 5 DISTRIBUTION OF ESTIMATED OPTIMA; GLOBAL RATIO OF heat capacity and enthalpy
#see EXAMPLE_relationship_H-C_subset30_opt30
#heat capacity -c- in the y axis and enthalpy in the x axis as the optimum is defined as opt=-heat capacity/enthalpy
xe=c(
2495406.163,	
2525456.747,	
1920512.854,	
1813037.642,	
835974.1929,	
1534593.381,	
2405724.061)	
ye=c(
8360.076167,
8475.731728,
6414.681891,
5850.678027,
2788.466498,
5104.453948,
7948.510431)

#svg("f-s4-1.svg")
par(mfrow=c(4,4));par(mar=c(2,2,2,2))
plot(ye~xe,pch=16,col=34) #,ylim=c(min(y),max(y)),xlim=c(min(x),max(x)))
#clip(min(xe),max(xe), min(ye),max(ye))
abline(lm(ye~0+xe))
summary(lm(ye~0+xe))
dev.off()

#relationships among parameters

out=read.table("output-parameters.txt",h=T)
y=-out[,1];x=out[,3]



#svg("f-s4-2.svg")
plot(ye~xe, ylim=c(min(y),max(y)),xlim=c(min(x),max(x)),pch=16,col=34);par(new=TRUE)
plot(y~x, ylim=c(min(y),max(y)),xlim=c(min(x),max(x)))
abline(lm(y~0+x))
#dev.off()
#-0.003361, this is the estimated slope
#lm(y~x) if we make it using the intercept the parameters are -14.656536    -0.003359

topt=-out[,1]/out[,3]
#svg("extendeddatafigure-7.2.svg")
par(mfrow=c(3,3))
hist(topt)
#dev.off()

#median(topt) #0.0033487
#mean(topt) #0.0033182






#####################################################################################################################################################################

#####################################################################################################################################################################

#####################################################################################################################################################################


################################################ supplementary table s2



############################################ for enzymes


library(minpack.lm);z = function(params, x) {-params[1]*log(x)-params[2]*x+params[3]}
z.v2=function(params, x){-params[1]*log(x)-params[2]*x+params[3]}; #x=1/(x+273.15);y=8.31*log((y*6.62e-34)/((x+273.15)*1.38e-23))

# to estimate the PARAMETERS of the loglin fitted curves
df1=read.delim("data1",h=F);                         #the "read.delim" function reads dat awith empty cells
df2=read.delim("data2",h=F);

#here I have to i) sort by "generic variable", ii) extract the subdataframe of "enzyme reaction rate" and define again the p and q dataframes 
#then use different equations to fit the parameters for enzymes and above molecular level 
#newdata <- mtcars[order(mpg),]



df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:29,3:244];p=t(p);#colnames(p)=df1$V2[1:29]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:29,3:244];q=t(q);#colnames(q)=df2$V2[1:29]

out=NULL
for (i in 1:ncol(p)){
tryCatch({

x=1/(p[,i]+273.15);y=8.31*log(q[,i]/(p[,i]+273.15));y[y==-Inf]=NA;y[y==Inf]=NA


loglin<- nlsLM(y~-a*log(x)-b*x+c,start=list(a=1,b=1,c=1))

#multiple linear regression to fit the model
x2=log(x)
summary(lm(y~x+x2))
r2=summary(lm(y~x+x2))$r.squared
summary(lm(y~x+x2))$coefficients[2,4]#p value of x
pvalue.mlr=summary(lm(y~x+x2))$coefficients[3,4]#p value of x2
a=summary(loglin)$coefficients[1,1]
b=summary(loglin)$coefficients[2,1]
c=summary(loglin)$coefficients[3,1]
pvals=data.frame(summary(loglin)$coefficients[1,1],             #a
summary(loglin)$coefficients[1,4],                          #p-value_a
summary(loglin)$coefficients[2,1],                          #b
summary(loglin)$coefficients[2,4],                          #p-value_b
c,                          				    #c
summary(loglin)$coefficients[3,4],                          #p-value_c
#cor(z(coef(loglin),x),y,use = "na.or.complete")            #cor_obse_y-pred_y
r2
)

out=rbind(out,pvals) #2,3 y cor(z(coef(loglin),x),y,use = "na.or.complete"); aqui se selecciona el parametro que queremos anotar
}, error = function(msg){
            return("Error")
        })          
   

}
out.enzymes=out


############################################# for above molecular levels


library(minpack.lm);z = function(params, x) {-params[1]*log(x)-params[2]*x+params[3]}
z.v2=function(params, x){-params[1]*log(x)-params[2]*x+params[3]}; #x=1/(x+273.15);y=8.31*log((y*6.62e-34)/((x+273.15)*1.38e-23))

# to estimate the PARAMETERS of the loglin fitted curves
p=read.delim("data1",h=F);                         #the "read.delim" function reads dat awith empty cells
q=read.delim("data2",h=F);

#here I have to i) sort by "generic variable", ii) extract the subdataframe of "enzyme reaction rate" and define again the p and q dataframes 
#then use different equations to fit the parameters for enzymes and above molecular level 
#newdata <- mtcars[order(mpg),]




df1 <- df1[order(df1$V1,df1$V2),];p=df1[30:128,3:244];p=t(p);#colnames(p)=df1$V2[30:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[30:128,3:244];q=t(q);#colnames(q)=df2$V2[30:128]



out=NULL
for (i in 1:ncol(q)){
tryCatch(
{
x=1/(p[,i]+273.15);y=8.31*log(q[,i])

loglin<- nlsLM(y~-a*log(x)-b*x+c,start=list(a=1,b=1,c=1))

#multiple linear regression to fit the model
x2=log(x)
summary(lm(y~x+x2))
r2=summary(lm(y~x+x2))$r.squared
summary(lm(y~x+x2))$coefficients[2,4]#p value of x
pvalue.mlr=summary(lm(y~x+x2))$coefficients[3,4]#p value of x2
a=summary(loglin)$coefficients[1,1]
b=summary(loglin)$coefficients[2,1]
c=summary(loglin)$coefficients[3,1]
pvals=data.frame(summary(loglin)$coefficients[1,1],             #a
summary(loglin)$coefficients[1,4],                          #p-value_a
summary(loglin)$coefficients[2,1],                          #b
summary(loglin)$coefficients[2,4],                          #p-value_b
c,                          				#c
summary(loglin)$coefficients[3,4],                          #p-value_c
#cor(z(coef(loglin),x),y,use = "na.or.complete")            #cor_obse_y-pred_y
r2
)
    out=rbind(out,pvals) #2,3 y cor(z(coef(loglin),x),y,use = "na.or.complete"); aqui se selecciona el parametro que queremos anotar
            },
            error = function(e){
            message("* Caught an error on itertion ", i)
            print(e)
        }
   )

}
out.aboveenzymes=out

out=rbind(out.enzymes,out.aboveenzymes)


write.table(out,file="output-parameters.txt",row.names=F)

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$organization_level,r$taxonomic_domain,out)
out=out[order(r$concavity,r$organization_level,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL
write.table(out,file="output-parameters_bylevel&taxa.txt",row.names=F)

################### subsampling number of studies to check how varies the mean with number of studies

#delta_c=out[,1]
#r=NULL;for(i in 1:nrow(out)){
#mdc=mean(sample(delta_c,i))
#r=cbind(r,mdc)
#}
#r=as.vector(r);it=1:nrow(out)
#plot(it,r,type='l')

#now plotting the cummulative sd of the mean
#s=NULL
#for (i in 1:118){
#sdmc=sd(c(r[i],r[i+1]))/sqrt(2)
#s=cbind(s,sdmc)
#}
#s=as.vector(s)
#it=it-1
#plot(it,s,type='l')

######################### summary of values for concave
                                                               #concave 1:96, convex 97:128

out=rbind(out.enzymes,out.aboveenzymes)
r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),] #r$concavity,
rownames(out)=c(1:nrow(out))
out=out[1:96,4:10] #for concave curves
#out=out[102:118,4:10] #for convex curves



a=c(min(out[,1],na.rm=T),
max(out[,1],na.rm=T),
median(out[,1],na.rm=T),IQR(out[,1]),
mean(out[,1],na.rm=T),
(sd(out[,1])/sqrt(length(out[,1])))
)
b=c(min(out[,3],na.rm=T),
max(out[,3],na.rm=T),
median(out[,3],na.rm=T),IQR(out[,3]),
mean(out[,3],na.rm=T),
(sd(out[,3])/sqrt(length(out[,3])))
)

c=c(min(out[,5],na.rm=T),
max(out[,5],na.rm=T),
median(out[,5],na.rm=T),IQR(out[,5]),
mean(out[,5],na.rm=T),
(sd(out[,5])/sqrt(length(out[,5])))
)

d=c(min(out[,7],na.rm=T),
max(out[,7],na.rm=T),
median(out[,7],na.rm=T),IQR(out[,7]),
mean(out[,7],na.rm=T),
(sd(out[,7])/sqrt(length(out[,7])))
)

p=cbind(out[,2],out[,4],out[,6])

pvalue=c(min(p,na.rm=T),
max(p,na.rm=T),
median(p,na.rm=T),IQR(p,na.rm=T),
mean(p,na.rm=T),
(sd(p,na.rm=T)/sqrt(length(p)))
)



df_concaves=data.frame(a,b,c,d,pvalue, row.names=c('min','max','median','iqr','mean','se'))
colnames(df_concaves)=c("a","b","ln_Y_0","r2","pvalue")
df_concaves
write.table(df_concaves,file="tables2_output.means.concavecurves.txt")

#########################   convex curves


out=rbind(out.enzymes,out.aboveenzymes)
r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),] #r$concavity,
rownames(out)=c(1:nrow(out))

#out=out[1:101,4:10 #for concave curves
out=out[97:128,4:10] #for convex curves

a=c(min(out[,1],na.rm=T),
max(out[,1],na.rm=T),
median(out[,1],na.rm=T),IQR(out[,1]),
mean(out[,1],na.rm=T),
(sd(out[,1])/sqrt(length(out[,1])))
)
b=c(min(out[,3],na.rm=T),
max(out[,3],na.rm=T),
median(out[,3],na.rm=T),IQR(out[,3]),
mean(out[,3],na.rm=T),
(sd(out[,3])/sqrt(length(out[,3])))
)

c=c(min(out[,5],na.rm=T),
max(out[,5],na.rm=T),
median(out[,5],na.rm=T),IQR(out[,5]),
mean(out[,5],na.rm=T),
(sd(out[,5])/sqrt(length(out[,5])))
)

d=c(min(out[,7],na.rm=T),
max(out[,7],na.rm=T),
median(out[,7],na.rm=T),IQR(out[,7]),
mean(out[,7],na.rm=T),
(sd(out[,7])/sqrt(length(out[,7])))
)

p=cbind(out[,2],out[,4],out[,6])

Ps=c(min(p,na.rm=T),
max(p,na.rm=T),
median(p,na.rm=T),IQR(p,na.rm=T),
mean(p,na.rm=T),
(sd(p,na.rm=T)/sqrt(length(p)))
)



df_convexes=data.frame(a,b,c,d,Ps, row.names=c('min','max','median','iqr','mean','se'))
colnames(df_convexes)=c("a","b","ln_Y_0","r2","pvalue")
df_convexes
write.table(df_convexes,file="tables2_output.means.convexcurves.txt")






################################################ anovas to assess differences in parameters among levels of factors
################################################ tested only for concave curves



######### histograms of the distributions of parameter values





######################################                summaries by taxa/level                         table s3, s4
###########################################################CONCAVE
out=rbind(out.enzymes,out.aboveenzymes)
o=out;
r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]
dc=cbind(o,r)                                        #dataframe with metadata

dc=dc[order(dc$concavity),]
dc=dc[1:96,]


##########################   by taxa                                                   TABLE S3 CONCAVE


options(digits=4)
library(dplyr)
d1<-dc %>%
group_by(taxonomic_domain) %>%
summarize(mean_c=mean(summary.loglin..coefficients.1..1.),mean_h=mean(summary.loglin..coefficients.2..1.),mean_s0=mean(c),
sd_c=sd(summary.loglin..coefficients.1..1.),sd_h=sd(summary.loglin..coefficients.2..1.),sd_s0=sd(c))

d1_n<-dc %>%
group_by(taxonomic_domain) %>%
summarize(n())

#here, from the tibbles we build a dataframe, but this time estimating the standard errors:

df=cbind(d1$mean_c,d1$sd_c/sqrt(d1_n$'n()'),d1$mean_h,d1$sd_h/sqrt(d1_n$'n()'),d1$mean_s0,d1$sd_s0/sqrt(d1_n$'n()'))

df #this is the supp table s3
df_s3_concave=as.data.frame(df)
colnames(df_s3_concave)=c("C","s.e.C","H","s.e.H","c","s.e.c")
rownames(df_s3_concave)=d1_n$taxonomic_domain
write.table(df_s3_concave,file="supp.table.s3-conc.txt")

#######################################by level                                    TABLE S4 CONCAVE
d2=dc %>%
group_by(organization_level) %>%
summarize(mean_c=mean(summary.loglin..coefficients.1..1.),mean_h=mean(summary.loglin..coefficients.2..1.),mean_s0=mean(c),
sd_c=sd(summary.loglin..coefficients.1..1.),sd_h=sd(summary.loglin..coefficients.2..1.),sd_s0=sd(c))

d2_n<-dc %>%
group_by(organization_level) %>%
summarize(n())

df2=cbind(d2$mean_c,d2$sd_c/sqrt(d2_n$'n()'),d2$mean_h,d2$sd_h/sqrt(d2_n$'n()'),d2$mean_s0,d2$sd_s0/sqrt(d2_n$'n()'))

df2#this is supp table s4
#add colnames
df2_s4_concave=as.data.frame(df2)
colnames(df2_s4_concave)=c("C","s.e.C","H","s.e.H","c","s.e.c")
rownames(df2_s4_concave)=d2_n$organization_level
write.table(df2_s4_concave,file="supp.table.s4-conc.txt")

#################################################################### CONVEX
o=out;
r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]
dc=cbind(o,r)                                        #dataframe with metadata

dc=dc[order(dc$concavity),]
dc=dc[97:128,]


##########################   anova by taxa                                    TABLE S3 CONVEX


options(digits=4)
library(dplyr)
d1<-dc %>%
group_by(taxonomic_domain) %>%
summarize(mean_c=mean(summary.loglin..coefficients.1..1.),mean_h=mean(summary.loglin..coefficients.2..1.),mean_s0=mean(c),
sd_c=sd(summary.loglin..coefficients.1..1.),sd_h=sd(summary.loglin..coefficients.2..1.),sd_s0=sd(c))

d1_n<-dc %>%
group_by(taxonomic_domain) %>%
summarize(n())

#here, from the tibbles we build a dataframe, but this time estimating the standard errors:

df=cbind(d1$mean_c,d1$sd_c/sqrt(d1_n$'n()'),d1$mean_h,d1$sd_h/sqrt(d1_n$'n()'),d1$mean_s0,d1$sd_s0/sqrt(d1_n$'n()'))

df #this is the supp table s3
df_s3_convex=as.data.frame(df)
colnames(df_s3_convex)=c("C","s.e.C","H","s.e.H","c","s.e.c")
rownames(df_s3_convex)=d1_n$taxonomic_domain
write.table(df_s3_convex,file="supp.table.s3-conv.txt")

#######################################by level                             TABLE S4 CONVEX
d2=dc %>%
group_by(organization_level) %>%
summarize(mean_c=mean(summary.loglin..coefficients.1..1.),mean_h=mean(summary.loglin..coefficients.2..1.),mean_s0=mean(c),
sd_c=sd(summary.loglin..coefficients.1..1.),sd_h=sd(summary.loglin..coefficients.2..1.),sd_s0=sd(c))

d2_n<-dc %>%
group_by(organization_level) %>%
summarize(n())

df2=cbind(d2$mean_c,d2$sd_c/sqrt(d2_n$'n()'),d2$mean_h,d2$sd_h/sqrt(d2_n$'n()'),d2$mean_s0,d2$sd_s0/sqrt(d2_n$'n()'))

df2#this is supp table s4
#add colnames
df2_s4_convex=as.data.frame(df2)
colnames(df2_s4_convex)=c("C","s.e.C","H","s.e.H","c","s.e.c")
rownames(df2_s4_convex)=d2_n$organization_level
write.table(df2_s4_convex,file="supp.table.s4-conv.txt")





df_s3_concave
df_s3_convex

df2_s4_concave
df2_s4_convex





############                                                          ###### table s5 ANOVAs concaves and convexes

#to implement the two-way anova we can do
#y~x1*x2 or
#x1+x2+x1:x2
           #########################heat capacity
library(DescTools)
###concave

out=rbind(out.enzymes,out.aboveenzymes)
o=out;
r=read.csv("refs.csv")
#r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

dc=cbind(o,r)                                        #dataframe with metadata
dc=dc[order(dc$concavity),]
dc=dc[1:96,]
dc[,'taxonomic_domain_factor']<-as.factor(dc[,'taxonomic_domain_factor'])
dc[,'organization_level_factor']<-as.factor(dc[,'organization_level_factor'])


#organization level and taxonomic domain

y1=dc$summary.loglin..coefficients.1..1.
x1=dc$taxonomic_domain_factor
x2=dc$organization_level_factor
summary(aov(y1~x1+x2+x1:x2));

####convex
out=rbind(out.enzymes,out.aboveenzymes)
o=out;
r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]
dc=cbind(o,r)                                        #dataframe with metadata
dc=dc[order(dc$concavity),]
dc=dc[97:128,]

#organization level and taxonomic domain
summary(aov(dc[,1]~dc[,10]));
summary(aov(dc[,1]~dc[,14]));
summary(aov(dc[,1]~dc[,10]*dc[,14]));


           #########################enthalpy
###concave

out=rbind(out.enzymes,out.aboveenzymes)
o=out;
r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]
dc=cbind(o,r)                                        #dataframe with metadata
dc=dc[order(dc$concavity),]
dc=dc[1:96,]

#organization level and taxonomic domain
summary(aov(dc[,3]~dc[,10]));
summary(aov(dc[,3]~dc[,14]));
summary(aov(dc[,3]~dc[,10]*dc[,14]));

####convex
out=rbind(out.enzymes,out.aboveenzymes)
o=out;
r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]
dc=cbind(o,r)                                        #dataframe with metadata
dc=dc[order(dc$concavity),]
dc=dc[97:128,]

#organization level and taxonomic domain
summary(aov(dc[,3]~dc[,10]));
summary(aov(dc[,3]~dc[,14]));
summary(aov(dc[,3]~dc[,10]*dc[,14]));



           #########################entropy at a reference temperature
###concave

out=rbind(out.enzymes,out.aboveenzymes)
o=out;
r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]
dc=cbind(o,r)                                        #dataframe with metadata
dc=dc[order(dc$concavity),]
dc=dc[1:96,]

#organization level and taxonomic domain
summary(aov(dc[,5]~dc[,10]));
summary(aov(dc[,5]~dc[,14]));
summary(aov(dc[,5]~dc[,10]*dc[,14]));

####convex
out=rbind(out.enzymes,out.aboveenzymes)
o=out;
r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]
dc=cbind(o,r)                                        #dataframe with metadata
dc=dc[order(dc$concavity),]
dc=dc[97:128,]

#organization level and taxonomic domain
summary(aov(dc[,5]~dc[,10]));
summary(aov(dc[,5]~dc[,14]));
summary(aov(dc[,5]~dc[,10]*dc[,14]));






#######################################################################################################################################################################
#######################################################################################################################################################################
#fig. s6. alternative data collapse, JIA derivation


################################################# data collapse code

#################################################
library(minpack.lm);library(kimsic)
z = function(params, x) {-params[1]*log(x)-params[2]*x+params[3]}
z.v2=function(params, x){-params[1]*log(x)-params[2]*x+params[3]}; #x=1/(x+273.15);y=8.31*log((y*6.62e-34)/((x+273.15)*1.38e-23))

# to estimate the PARAMETERS of the loglin fitted curves
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);

#here I have to i) sort by "generic variable", ii) extract the subdataframe of "enzyme reaction rate" and define again the p and q dataframes 
#then use different equations to fit the parameters for enzymes and above molecular level 
#newdata <- mtcars[order(mpg),]



df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]



#gas constant: kJ/(mol*K)= 8.31445e-3=0.00831445
#1.38e-23 boltzmann jk-1
#6.62e-34 planck js-1
#8.3144621e-5= m3 bar K−1 mol−1
#8.205746e−5 m3 atm K−1 mol−1 

out=NULL
for (i in 1:ncol(p)){
tryCatch({

x=1/(p[,i]+273.15);y=log(q[,i]/(p[,i]+273.15));y[y==-Inf]=NA;y[y==Inf]=NA
#x=1/(p[,i]+273.15);y=log(q[,i]/(p[,i]+273.15))

loglin<- nlsLM(y~-a*log(x)-b*x+c,start=list(a=1,b=1,c=1))

#multiple linear regression to fit the model
x2=log(x)
#summary(lm(y~x+x2))
r2=summary(lm(y~x+x2))$r.squared
summary(lm(y~x+x2))$coefficients[2,4]#p value of x
pvalue.mlr=summary(lm(y~x+x2))$coefficients[3,4]#p value of x2
a=summary(loglin)$coefficients[1,1]
b=summary(loglin)$coefficients[2,1]
c=summary(loglin)$coefficients[3,1]
#delta_S_0=c+(a*log(298.15))-log(1.38e-23/6.62e-34)
pvals=data.frame(summary(loglin)$coefficients[1,1],             #a
summary(loglin)$coefficients[1,4],                          #p-value_a
summary(loglin)$coefficients[2,1],                          #b
summary(loglin)$coefficients[2,4],                          #p-value_b
#delta_S_0,
c,                          				#entropy at a reference temperature
summary(loglin)$coefficients[3,4],                          #p-value_c
#cor(z(coef(loglin),x),y,use = "na.or.complete")            #cor_obse_y-pred_y
r2
)

out=rbind(out,pvals) #2,3 y cor(z(coef(loglin),x),y,use = "na.or.complete"); aqui se selecciona el parametro que queremos anotar
}, error = function(msg){
            return("Error")
        })          
   

}
output.enzyme=out




out=NULL
for (i in 1:ncol(p)){
tryCatch({

x=1/(p[,i]+273.15);y=log(q[,i]);y[y==-Inf]=NA;y[y==Inf]=NA
#x=1/(p[,i]+273.15);y=log(q[,i]/(p[,i]+273.15))

loglin<- nlsLM(y~-a*log(x)-b*x+c,start=list(a=1,b=1,c=1))

#multiple linear regression to fit the model
x2=log(x)
#summary(lm(y~x+x2))
r2=summary(lm(y~x+x2))$r.squared
summary(lm(y~x+x2))$coefficients[2,4]#p value of x
pvalue.mlr=summary(lm(y~x+x2))$coefficients[3,4]#p value of x2
a=summary(loglin)$coefficients[1,1]
b=summary(loglin)$coefficients[2,1]
c=summary(loglin)$coefficients[3,1]
#delta_S_0=c+(a*log(298.15))-log(1.38e-23/6.62e-34)
pvals=data.frame(summary(loglin)$coefficients[1,1],             #a
summary(loglin)$coefficients[1,4],                          #p-value_a
summary(loglin)$coefficients[2,1],                          #b
summary(loglin)$coefficients[2,4],                          #p-value_b
#delta_S_0,
c,                          				#entropy at a reference temperature
summary(loglin)$coefficients[3,4],                          #p-value_c
#cor(z(coef(loglin),x),y,use = "na.or.complete")            #cor_obse_y-pred_y
r2
)

out=rbind(out,pvals) #2,3 y cor(z(coef(loglin),x),y,use = "na.or.complete"); aqui se selecciona el parametro que queremos anotar
}, error = function(msg){
            return("Error")
        })          
   

}
output.macroscopic=out
#################################################   data collapse concave enzyme
#IMPORTANT: COLUMN INTERVLAS SHOULD BE DEFINED FOR out, p, AND q

out=as.data.frame(cbind(output.enzyme[,1],output.enzyme[,3],output.enzyme[,5]))

options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);
df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL


out=out[1:19,4:6] #for concave curves enzyme
#out=out[1:96,4:6] #for concave curves
#out=out[102:118,4:6] #for convex curves
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[1:19,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[1:19,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]
s_ys=NULL                
    for (i in 1:nrow(d)){
#s_y=(-a[i]*log(opt[i])/a[i])+((-log(q[,i]/(p[,i]+273.15))+log.c[i])/a[i])-((b[i]*opt[i])/a[i])   #gbw's                          
s_y=log(d[i,2]/-d[i,1])+((log(q[,i]/(p[,i]+273.15))-d[i,3])/-d[i,1])                          #jia's
    s_ys[i]=list(s_y)                
}
max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA

x=1/(p+273.15)
s_xs=NULL                
for (i in 1:nrow(d)){          
s_x=((d[i,2]/-d[i,1])*x[,i])
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)            

#svg("figure_s6.svg")
par(mfrow=c(4,4));par(mar=c(2,2,2,2))
#for (i in 1:18){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}

#for (i in 19:19){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1)}

for (i in 1:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}
for (i in 3:5){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=2);par(new=T)}
for (i in 6:6){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=4);par(new=T)}
for (i in 7:11){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=5);par(new=T)}
for (i in 12:18){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=3);par(new=T)}
for (i in 19:19){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=7);par(new=T)}

#library(minpack.lm);library(kimisc)
z2.sad=function(params, x){params[1]*log(x)-params[2]*x}
z3.happy=function(params, x){-params[1]*log(x)+params[2]*(x-1)} #y=-1*log(x)+1*(x-1)
z3.sad=function(params, x){params[1]*log(x)-params[2]*(x-1)} #y=1*log(x)-1*(x-1)
xc=seq(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T),0.00001)
plot(xc,z2.sad(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #jia
#plot(xc,z3.sad(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #gw

####################################################################################### concave macroscopic
out=as.data.frame(cbind(output.macroscopic[,1],output.macroscopic[,3],output.macroscopic[,5]))

options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);
df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL

out=out[20:96,4:6] #for concave curves above-enzyme
#out=out[1:96,4:6] #for concave curves
#out=out[102:118,4:6] #for convex curves
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[20:96,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[20:96,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]


p=p[,1:]
s_ys=NULL                
    for (i in 1:nrow(d)){
#s_y=(-a[i]*log(opt[i])/a[i])+((-log(q[,i])+log.c[i])/a[i])-((b[i]*opt[i])/a[i])   #gbw's                          
s_y=log(d[i,2]/-d[i,1])+((log(q[,i])-d[i,3])/-d[i,1])                          #jia's

    s_ys[i]=list(s_y)                
}
max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA

x=1/(p+273.15)
s_xs=NULL                
for (i in 1:nrow(d)){          
s_x=((d[i,2]/-d[i,1])*x[,i])
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)            

#svg('fig2colllllapse.svg')
#par(mfrow=c(2,2));#par(mar=c(2,2,2,2)
#for (i in 1:76){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}

#for (i in 77:77){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1)}

for (i in 1:1){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=1,col=4);par(new=T)}
for (i in 2:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=2,col=4);par(new=T)}
for (i in 3:3){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=3,col=4);par(new=T)}
for (i in 4:8){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=1);par(new=T)}
for (i in 9:13){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=2);par(new=T)}
for (i in 14:15){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=4);par(new=T)}
for (i in 16:16){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=4,col=3);par(new=T)}
for (i in 17:17){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=19,col=4);par(new=T)}
for (i in 18:18){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=5,col=4);par(new=T)}
for (i in 19:26){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=7,col=4);par(new=T)}
for (i in 27:31){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=2);par(new=T)}
for (i in 32:34){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=4);par(new=T)}
for (i in 35:35){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=5);par(new=T)}
for (i in 36:40){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=3);par(new=T)}
for (i in 41:41){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=10,col=4);par(new=T)}
for (i in 42:42){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=11,col=4);par(new=T)}
for (i in 43:43){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=11,col=5);par(new=T)}
for (i in 44:47){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=12,col=1);par(new=T)}
for (i in 48:50){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=12,col=2);par(new=T)}
for (i in 51:51){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=1);par(new=T)}
for (i in 52:53){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=2);par(new=T)}
for (i in 54:55){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=4);par(new=T)}
for (i in 56:56){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=5);par(new=T)}
for (i in 57:58){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=13,col=3);par(new=T)}
for (i in 59:60){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=1);par(new=T)}
for (i in 61:64){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=2);par(new=T)}
for (i in 65:68){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=4);par(new=T)}
for (i in 69:71){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=5);par(new=T)}
for (i in 72:72){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=3);par(new=T)}
for (i in 73:73){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=15,col=7);par(new=T)}
for (i in 74:74){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=17,col=1);par(new=T)}
for (i in 75:76){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=17,col=2);par(new=T)}
for (i in 77:77){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=17,col=7);par(new=T)}


z2.sad=function(params, x){params[1]*log(x)-params[2]*x}
z3.happy=function(params, x){-params[1]*log(x)+params[2]*(x-1)} #y=-1*log(x)+1*(x-1)
z3.sad=function(params, x){params[1]*log(x)-params[2]*(x-1)} #y=1*log(x)-1*(x-1)

xc=seq(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T),0.00001)
plot(xc,z2.sad(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #jia
#plot(xc,z3.sad(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #gw



####################################################################################### data collapse convex enzyme

out=as.data.frame(cbind(output.enzyme[,1],output.enzyme[,3],output.enzyme[,5]))

options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);
df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL

#peak=out
#peak=peak[97:128,];rownames(peak)=NULL;peak
#colnames(peak)=c("curv","vari","taxa","a","b","s0")
#peak=peak[order(peak$taxa, decreasing=F),];rownames(peak)=NULL;peak


#out=out[97:128,4:6] #for convex curves
out=out[97:106,4:6] #for convex curves enzyme # 106:128 convex above-enzyme
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[97:106,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[97:106,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]

#s_ys=NULL
#    for (i in 1:ncol(p)){
#    #s_y=log(d[i,2]/-d[i,1])+((log(q[,i])+d[i,3])/-d[i,1])   #scaled rate; ln(p_0)=d[,3]
#    s_y=((1/-d[i,1])*d[i,3])-log(d[i,2]/-d[i,1])-((1/-d[i,1])*log(q[,i]))
#    s_ys[i]=list(s_y)                
#}

s_ys=NULL                
    for (i in 1:nrow(d)){
#s_y=-(-a[i]*log(opt[i])/a[i])-((-log(q[,i]/(p[,i]+273.15))+log.c[i])/a[i])+((b[i]*opt[i])/a[i])   #gbw's                          
s_y=((1/-d[i,1])*d[i,3])-log(d[i,2]/-d[i,1])-((1/-d[i,1])*log(q[,i]/(p[,i]+273.15)))               #JIA's CONVEX
    s_ys[i]=list(s_y)                
}
max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA


x=1/(p+273.15)
s_xs=NULL                
for (i in 1:nrow(d)){          
s_x=((d[i,2]/-d[i,1])*x[,i])
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)            

#svg('fig2colllllapse.svg')
#par(mfrow=c(4,4));par(mar=c(2,2,2,2))
#for (i in 1:9){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}
#for (i in 10:10){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1)}

for(i in 1:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}
for(i in 3:10){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=4);par(new=T)}
for(i in 11:11){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=5,col=4);par(new=T)}

z2=function(params, x){-params[1]*log(x)+params[2]*x}
z3.happy=function(params, x){-params[1]*log(x)+params[2]*(x-1)} #y=-1*log(x)+1*(x-1)
z3.sad=function(params, x){params[1]*log(x)-params[2]*(x-1)} #y=1*log(x)-1*(x-1)

xc=seq(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T),0.00001)
plot(xc,z2.happy(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #jia
#plot(xc,z3.happy(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #gw


##################################################################### data collapse convex macroscopic
out=as.data.frame(cbind(output.macroscopic[,1],output.macroscopic[,3],output.macroscopic[,5]))

options(digits=5)   
library(minpack.lm);library(dplyr)
z = function(params, x) {
-params[1]*log(x)-params[2]*x+params[3]
}
df1=read.delim("data1",h=F);                         #the "read.delim" function reads data with empty cells
df2=read.delim("data2",h=F);
df1 <- df1[order(df1$V1,df1$V2),];p=df1[1:128,3:244];p=t(p);colnames(p)=df1$V2[1:128]
df2 <- df2[order(df2$V1,df2$V2),];q=df2[1:128,3:244];q=t(q);colnames(q)=df2$V2[1:128]

r=read.delim('refs',h=T);r=r[order(r$Generic.variable,r$auhor.and.year),]

out=cbind(r$concavity,r$Generic.variable,r$taxonomic_domain,out)
out=out[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
rownames(out)=NULL

#peak=out
#peak=peak[97:128,];rownames(peak)=NULL;peak
#colnames(peak)=c("curv","vari","taxa","a","b","s0")
#peak=peak[order(peak$taxa, decreasing=F),];rownames(peak)=NULL;peak


#out=out[97:128,4:6] #for convex curves
#out=out[97:106,4:6] #for convex curves enzyme # 106:128 convex above-enzyme
out=out[106:128,4:6]
d=out;



p=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,p);p=t(p); 
out1=NULL
for (i in 1:nrow(p)){
pp=as.numeric(p[i,])
out1=rbind(out1,pp)
}
p=out1
p=p[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),];
p=p[106:128,4:ncol(p)];p=t(p);

q=rbind(r$concavity,r$Generic.variable,r$taxonomic_domain,q);q=t(q);
out1=NULL
for (i in 1:nrow(q)){
qq=as.numeric(q[i,])
out1=rbind(out1,qq)
}
q=out1
q=q[order(r$concavity,r$Generic.variable,r$taxonomic_domain, decreasing=F),]
q=q[106:128,4:ncol(q)];q=t(q);

p=as.data.frame(p)
q=as.data.frame(q)

opt=(-d[,1]/d[,2]);a=d[,1];b=d[,2];log.c=d[,3]

#s_ys=NULL
#    for (i in 1:ncol(p)){
#    #s_y=log(d[i,2]/-d[i,1])+((log(q[,i])+d[i,3])/-d[i,1])   #scaled rate; ln(p_0)=d[,3]
#    s_y=((1/-d[i,1])*d[i,3])-log(d[i,2]/-d[i,1])-((1/-d[i,1])*log(q[,i]))
#    s_ys[i]=list(s_y)                
#}

s_ys=NULL                
    for (i in 1:nrow(d)){
#s_y=-(-a[i]*log(opt[i])/a[i])-((-log(q[,i])+log.c[i])/a[i])+((b[i]*opt[i])/a[i])   #gbw's                          
#s_y=log(d[i,2]/-d[i,1])+((log(q[,i])-d[i,3])/-d[i,1])                              #jia's concave
s_y=((1/-d[i,1])*d[i,3])-log(d[i,2]/-d[i,1])-((1/-d[i,1])*log(q[,i]))               #JIA's CONVEX
    s_ys[i]=list(s_y)                
}
max.length <- max(sapply(s_ys, length)); s_ys.df=do.call(cbind, lapply(s_ys, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) })) 
s_ys.df[s_ys.df==-Inf]=NA;s_ys.df[s_ys.df==Inf]=NA


x=1/(p+273.15)
s_xs=NULL                
for (i in 1:nrow(d)){          
s_x=((d[i,2]/-d[i,1])*x[,i])
s_xs[i]=list(s_x) 
               }
max.length <- max(sapply(s_xs, length)); s_xs.df=do.call(cbind, lapply(s_xs, function(.vec){ c(.vec, rep(NA, max.length - length(.vec))) }))                 
s_xs.df[s_xs.df==-Inf]=NA              
    s_xs.df=as.data.frame(s_xs.df)            

#svg('fig2colllllapse.svg')
#par(mfrow=c(4,4));par(mar=c(2,2,2,2))
#for (i in 1:22){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1);par(new=T)}

#for (i in 23:23){plot(s_ys.df[,i]~s_xs.df[,i],
#ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=0,col=1)}
for (i in 1:2){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=6,col=1);par(new=T)}
for (i in 2:3){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=6,col=2);par(new=T)}
for (i in 4:6){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=16,col=7);par(new=T)}
for (i in 7:7){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=20,col=4);par(new=T)}
for (i in 8:12){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=8,col=5);par(new=T)}
for (i in 13:14){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=18,col=4);par(new=T)}
for (i in 15:19){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=9,col=4);par(new=T)}
for (i in 20:21){plot(s_ys.df[,i]~s_xs.df[,i],ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),pch=14,col=5);par(new=T)}

z2.happy=function(params, x){-params[1]*log(x)+params[2]*x}
z3.happy=function(params, x){-params[1]*log(x)+params[2]*(x-1)} #y=-1*log(x)+1*(x-1)
z3.sad=function(params, x){params[1]*log(x)-params[2]*(x-1)} #y=1*log(x)-1*(x-1)

xc=seq(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T),0.00001)
plot(xc,z2.happy(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #jia
#plot(xc,z3.happy(c(1,1),xc),ylim=c(min(s_ys.df,na.rm=T),max(s_ys.df,na.rm=T)),xlim=c(min(s_xs.df,na.rm=T),max(s_xs.df,na.rm=T)),type="l",lwd="1",axes=F,ann=F) #gw

#dev.off()






































